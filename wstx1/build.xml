<?xml version="1.0" standalone='yes'?>

    <project name="Woodstox XML processor" basedir="." default="readme">

    <property name="ProjectName" value="Woodstox XML processor" />
    <!-- Source directories -->
    <property name="SrcDir" location="${basedir}/src" />
    <property name="JavaSrcDir" location="${SrcDir}/java" />
    <property name="TestSrcDir" location="${SrcDir}/test" />
    <property name="ResourcesDir" location="${SrcDir}/resources" />
    <!-- Libs -->
    <property name="LibDir" location="${basedir}/lib" />
    <!-- Build-related -->
    <property name="BuildDir" location="${basedir}/build" />
    <property name="BuildClassesDir" location="${BuildDir}/classes" />
    <!-- Documentation -->
    <property name="DocDir" location="${basedir}/doc" />
    <property name="JavaDocDir" location="${DocDir}/javadoc" />
    <!-- Test suite -->
    <property name="TestDir" location="${basedir}/test" />
    <property name="TestClassesDir" location="${TestDir}/classes" />
    <property name="TestResultsDir" location="${TestDir}/results" />
    <property name="TestXmlResultsDir" location="${TestResultsDir}/xml" />
    <property name="StaxTestClassesDir" location="${TestDir}/staxtest-classes" />

    <!-- Distribution -->
    <property name="DistDir" location="${basedir}/dist" />


    <!-- Version information -->

    <!-- Woodstox version -->
    <property name="STAX_TITLE" value="StAX 1.0 API" />
    <property name="STAX_VERSION" value="1.0" />
    <property name="STAX_VENDOR" value="http://jcp.org/en/jsr/detail?id=173" />
    <property name="WSTX_TITLE" value="WoodSToX XML-processor" />
    <property name="WSTX_VERSION" value="1.0.8" />
    <property name="WSTX_VENDOR" value="www.cowtowncoder.com" />

    <path id="classpath">
        <fileset dir="${LibDir}" includes="*.jar" />
    </path>

    <!-- And then something nifty, for creating minimal jars! -->
    <classfileset id="dtdFlattenClasses" dir="${BuildClassesDir}">
       <!-- main app class: -->
       <root classname="com.ctc.wstx.tools.DTDFlatten" />
       <!-- plus also need to include JDK-dependant helpers; they are
          - dynamically loaded and this task can not get dependencies
          - automatically
         -->
       <rootfileset dir="${BuildClassesDir}" includes="com/ctc/wstx/compat/Jdk*Impl.class" />
    </classfileset>

    <classfileset id="j2meInputMinimal" dir="${BuildClassesDir}">
       <root classname="com.ctc.wstx.stax.MinimalInputFactory" />
       <rootfileset dir="${BuildClassesDir}" includes="com/ctc/wstx/compat/Jdk*Impl.class" />
    </classfileset>

    <classfileset id="j2meInputValidating" dir="${BuildClassesDir}">
       <root classname="com.ctc.wstx.stax.ValidatingInputFactory" />
       <rootfileset dir="${BuildClassesDir}" includes="com/ctc/wstx/compat/Jdk*Impl.class" />
    </classfileset>

    <classfileset id="j2eeInput" dir="${BuildClassesDir}">
       <root classname="com.ctc.wstx.stax.WstxInputFactory" />
       <rootfileset dir="${BuildClassesDir}" includes="com/ctc/wstx/compat/Jdk*Impl.class" />
    </classfileset>

    <classfileset id="j2meOutput" dir="${BuildClassesDir}">
       <root classname="com.ctc.wstx.stax.MinimalOutputFactory" />
       <rootfileset dir="${BuildClassesDir}" includes="com/ctc/wstx/compat/Jdk*Impl.class" />
    </classfileset>

    <!--*********************************************************************-->
    <!-- The readme target shows a brief description of all targets          -->
    <!-- supported by this ant build file                                    -->
    <!--*********************************************************************-->
    <target name="readme">
        <echo message = "${ProjectName}'s Available Targets" />
        <echo message = "---------------------------------------------------" />
        <echo message = "1)  readme - Displays this information (default target)." />
        <echo message = "2)  clean - Remove any generated files/directories." />
        <echo message = "3)  compile - Compile all non-test ${ProjectName} code." />
        <echo message = "4)  jars - Compile and create all jars for non-test ${ProjectName} code (see below for specific ones)." />
        <echo message = "4a)  jar.wstx - Compile and create jar for non-test ${ProjectName} code." />
        <echo message = "4b)  jar.j2me - Compile and create minimal non-test jar of ${ProjectName}, that implements J2ME subset of StAX." />
        <echo message = "4c)  jar.dtd - Create a jar that contains a stand-alone utility for flattening DTDs." />
        <echo message = "5)  javadoc - Generate ${ProjectName} code documentation." />
        <echo message = "6)  test.compile - Compile ${ProjectName} code and test code" />
        <echo message = "       for JUnit tests." />
        <echo message = "7a)  test - Run Woodstox-specific JUnit tests." />
        <echo message = "7b)  staxtest - Run generic StAX JUnit tests." />
        <echo message = "8)  dist - Create distribution directory and copy necessary files there" />
        <echo message = "9) all - Run the clean, compile, javadoc," />
        <echo message = "         test and dist targets." />  
    </target>

    <target name="prepare">
        <!-- make build directories -->
        <mkdir dir="${BuildDir}" />
        <mkdir dir="${BuildClassesDir}" />

        <!-- make docs directories -->
        <mkdir dir="${DocDir}" />
        <mkdir dir="${JavaDocDir}" />

        <!-- make test output directories -->
        <mkdir dir="${TestDir}" />
        <mkdir dir="${TestClassesDir}" />
        <mkdir dir="${TestResultsDir}" />
        <mkdir dir="${TestXmlResultsDir}" />

        <!-- and finally distribution dir -->
        <mkdir dir="${DistDir}" />
    </target>

    <!--*********************************************************************-->
    <!-- clean - Removes all generated files/directories.                    -->
    <!--*********************************************************************-->
    <target name="clean">
        <delete dir="${BuildDir}"/>
        <delete dir="${DocDir}"/>
        <delete dir="${TestDir}"/>
        <delete dir="${DistDir}"/>
    </target>

    <target name="compile" depends="prepare">
        <javac SrcDir="${JavaSrcDir}" destdir="${BuildClassesDir}"
            debug="true"
        >
            <include name="com/ctc/**/*.java" />
            <include name="test/**/*.java" />
            <classpath refid="classpath" />
        </javac>
    </target>

    <target name="copy-resources" depends="prepare">
        <mkdir dir="${BuildClassesDir}/META-INF/services" />
        <copy toDir="${BuildClassesDir}/META-INF/services">    		
            <fileset dir="${ResourcesDir}">
                <include name="javax.xml.stream.XML*" />
            </fileset>           	
        </copy>
    </target>

    <!-- Dummy target that just includes all individual jars... --> 
    <target name="jars"
       depends="jar.wstx, jar.dtd, jars.j2me"
    />

    <target name="jars.j2me"
       depends="jar.j2me_input_min, jar.j2me_input_val, jar.j2me_output, jar.j2me_both_min, jar.j2me_both_val"
    />

    <target name="jar.wstx" depends="compile,copy-resources">
        <jar jarfile="${BuildDir}/wstx.jar"
            filesonly="true" >
          <manifest>
            <attribute name="Built-By" value="${user.name}"/>
            <attribute name="Specification-Title"   value="${STAX_TITLE}"/>
            <attribute name="Specification-Version" value="${STAX_VERSION}"/>
            <attribute name="Specification-Vendor"  value="${STAX_VENDOR}"/>
            <attribute name="Implementation-Title"   value="${WSTX_TITLE}"/>
            <attribute name="Implementation-Version" value="${WSTX_VERSION}"/>
            <attribute name="Implementation-Vendor"  value="${WSTX_VENDOR}"/>
          </manifest>
          <fileset dir="${BuildClassesDir}">
             <include name="com/ctc/**/*.class" />
             <include name="META-INF/services/javax.xml.stream.*" />
             <!-- No need to include embedded test classes -->
 <!--
             <exclude name="com/ctc/wstx/test/*.class" />
  -->
             <!-- No need to include separate tools -->
             <exclude name="com/ctc/wstx/tools/**/*.class" />
          </fileset>
        </jar>
    </target> 

    <!-- DTDFlatten jar is included in this build.xml just so that 
       - maintenance is easier...
      -->
    <target name="jar.dtd" depends="compile">
        <jar jarfile="${BuildDir}/dtd-flatten.jar"
            filesonly="true"
        >
          <manifest>
            <attribute name="Main-class" value="com.ctc.wstx.tools.DTDFlatten" />
         </manifest>
          <fileset refid="dtdFlattenClasses" />
          <!-- No need for overriding StAX classes via resource defs, as
               we'll only use DTDReader for flattening, directly.
            -->
        </jar>
    </target> 

    <!-- J2ME subset basically only includes stream reader/writers,
       - not event based reader/writers.
      --> 

    <target name="jar.j2me_input_min" depends="compile">
        <jar jarfile="${BuildDir}/wstx-j2me-min-input.jar" filesonly="true">
          <fileset refid="j2meInputMinimal" />
        </jar>
    </target> 

    <target name="jar.j2me_input_val" depends="compile">
        <jar jarfile="${BuildDir}/wstx-j2me-val-input.jar" filesonly="true">
          <fileset refid="j2meInputValidating" />
        </jar>
    </target> 

    <target name="jar.j2me_output" depends="compile">
        <jar jarfile="${BuildDir}/wstx-j2me-output.jar" filesonly="true">
          <fileset refid="j2meOutput" />
        </jar>
    </target> 

    <target name="jar.j2me_both_min" depends="compile">
        <jar jarfile="${BuildDir}/wstx-j2me-min-both.jar" filesonly="true">
          <fileset refid="j2meInputMinimal" />
          <fileset refid="j2meOutput" />
        </jar>
    </target> 

    <target name="jar.j2me_both_val" depends="compile">
        <jar jarfile="${BuildDir}/wstx-j2me-val-both.jar" filesonly="true">
          <fileset refid="j2meInputValidating" />
          <fileset refid="j2meOutput" />
        </jar>
    </target> 

    <target name="javadoc" depends="prepare">
        <!-- Build a dirpath that contains just the "source" tree -->
        <javadoc windowtitle="${ProjectName}"
            destdir="${JavaDocDir}" 
            author="true" 
            version="true">
            <packageset dir="${JavaSrcDir}" defaultexcludes="yes">
                <include name="com/ctc/**" />
            </packageset>
            <classpath refid="classpath" />
        </javadoc>
    </target> 
 
    <target name="all" depends="clean,javadoc,test,dist">
        <!-- This target simply depends on others to do its job -->
    </target>

    <!--*********************************************************************-->
    <!-- Tasks from here down are in support of junit tests.                 -->
    <!--*********************************************************************-->
    <target name="junit">
        <available property="junit.present" classname="junit.framework.TestCase" />
    </target>

    <target name="test.compile" depends="junit, jar.wstx" if="junit.present">
        <javac SrcDir="${TestSrcDir}" destdir="${TestClassesDir}"
            debug="true"
        >
            <include name="**/*.java" />
            <classpath>
                <pathelement location="${BuildDir}/wstx.jar"/>
                <pathelement location="${LibDir}/stax1.0.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="all-tests" depends="test,staxtest" />

    <!-- Running generic StAX tests -->
    <target name="staxtest" if="junit.present"
      depends="junit, jar.wstx, prepare-staxtest"
    >
       <!-- showoutput 'yes' to allow outputting debug msgs... -->
        <junit fork="no" printsummary="yes" haltonfailure="no"
         showoutput="yes">
            <batchtest fork="no" todir="${TestXmlResultsDir}">
                <fileset dir="${StaxTestClassesDir}">
                    <include name="org/codehaus/**/Test*.class"/>
                </fileset>
            </batchtest>
            <formatter type="xml" />
            <classpath refid="classpath" />
            <classpath path="${StaxTestClassesDir}" />
           <!-- Note: need to use Wstx jar, since it has properties to point
            - StAX to use correct implementation classes!
            -->
            <classpath>     
              <fileset dir="${BuildDir}">
                <include name="wstx.jar" />
              </fileset>
            </classpath>     
        </junit>

        <junitreport todir="${TestResultsDir}">
            <fileset dir="${TestXmlResultsDir}">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${TestResultsDir}" />
        </junitreport>
    </target>

    <target name="prepare-staxtest">
        <mkdir dir="${BuildDir}/staxtest-classes}" />
        <!-- and unpack test classes... unfortunately needed so JUnit
             can find classes (maybe there's a way to refer to a jar too,
             have not found one so far)
          -->
        <unzip dest="${StaxTestClassesDir}" overwrite="false">
           <fileset dir="${LibDir}">
              <include name="staxtest_*.jar" />
           </fileset>
        </unzip>
    </target>

    <!-- Running Woodstox-specific tests -->
    <target name="test" depends="test.compile" if="junit.present">
       <!-- showoutput 'yes' to allow outputting debug msgs... -->
        <junit fork="no" printsummary="yes" haltonfailure="no"
         showoutput="yes"
        >
            <batchtest fork="no" todir="${TestXmlResultsDir}">
                <fileset dir="${TestClassesDir}">
                    <include name="**/Test*.class"/>
                </fileset>
            </batchtest>
            <formatter type="xml" />
            <classpath>
                <pathelement location="${LibDir}/stax1.0.jar"/>
                <pathelement location="${BuildDir}/wstx.jar"/>
                <pathelement location="${TestClassesDir}" />
            </classpath>     
        </junit>

        <junitreport todir="${TestResultsDir}">
            <fileset dir="${TestXmlResultsDir}">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${TestResultsDir}" />
        </junitreport>
    </target>

    <target name="dist" depends="compile,jars,javadoc"
    >
<!--depends="compile,javadoc"-->
       <!-- First, let's copy the binary jars to dist -->
       <copy todir="${DistDir}">
          <fileset dir="${BuildDir}" includes="wstx*.jar" />
       </copy>
       <copy todir="${DistDir}" file="${BuildDir}/dtd-flatten.jar" />
       <!-- Then let's create the source distribution package -->
       <tar basedir="${basedir}" destfile="${DistDir}/wstx-src.tar"
        includes="build.xml" >
          <tarfileset dir="." includes="src/**/*.java" />
          <tarfileset dir="." includes="src/java/**/*.html" />
          <tarfileset dir="." includes="src/resources/*" />
          <tarfileset dir="." includes="release-notes/*" />
          <tarfileset dir="." includes="build.xml" />
          <tarfileset dir="." includes="project.xml" />
       </tar>
       <gzip zipfile="${DistDir}/wstx-src.tar.gz" src="${DistDir}/wstx-src.tar" />
       <delete file="${DistDir}/wstx-src.tar" />

       <!-- Then copy javadocs -->
       <copy todir="${DistDir}">
         <fileset dir="${DocDir}" includes="javadoc/**/*" />
       </copy>
       <!-- Plus, let's also just copy README and compatibility files, in
            addition to being included in source package
         -->
       <copy todir="${DistDir}" >
            <fileset dir="." includes="release-notes/*" />
       </copy>
    </target>
</project>
