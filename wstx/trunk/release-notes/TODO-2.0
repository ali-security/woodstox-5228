------------------------------------
Must-haves for 2.0
------------------------------------

* Stream writers:
   * Validate names (local, full), when such validation enabled

* DTD-handling/parsing:
[DONE] * Verify that an unparsed entity refers to a declared notation.
[DONE] * Make attribute type declarations accessible via stream API
   * Make attribute type declarations accessible via event API
   * Make 'is specified' property accessible via event API

* Unit testing: Implement at least simple basic StAX-tests for:
   * Event reader [partial]
   * Stream writer [partial]
   * Event writer
   * StAX2:
      * XMLStreamReader2:
         [DONE] * Test misc. properties (isEmpty, depth)
         [DONE] * Test skipElement

* Documentation:
   * Impl. details, like: always interns names, preserves attribute value
     orders.
   * Requirements for compiling, running:
      * Ant 1.5? (rootfileset)
      * Jars: for 1.3/1.2 SAX and DOM API jars?
      * How to build for 1.2, 1.3?

* Compatibility:
   * Remove dependency to BitSet.nextSetBit and nextClearBit; these methods
     are only in JDK 1.4. But they are (alas!) used by DTD processing.

* StAX 2.0 features:
   * Configuration/introspection:
      * Interning status (INTERN_NAMES [== local name, prefix], INTERN_URIS)?

   [DONE] * Package API classes to a separate jar (in addition to including
     them in woodstox jars)
   * XMLEventReader2:
      [DONE] * Add exception-aware next method
   * XMLEvent2:
      [DONE] * Add writeUsing(XMLStreamWriter)
   * XMLInputFactory2:
      [DONE] * Create URL/file-based factory methods for readers
   * XMLOutputFactory2: need for any new methods?
   * XMLStreamLocation2:
      [DONE] * allow access to nested location information
      * Long-valued accessors (and implementation)
      * w/ XMLStreamReader2; getStartLocation, getEndLocation
   * XMLStreamReader2:
      [DONE] * getFeature/setFeature: allow overriding DTD to use?
      [DONE] * Traversal: skipElement()
      [DONE] * Extra attribute access via AttributeInfo; findAttributeIndex,
        getIdAttributeIndex, getNotationAttributeIndex
      [DONE] * Separate DTD info access behind a new interface (DTDInfo?)
      [Partial] * Streaming access: getText with Writer arg
       * Streaming access: getTextReader
      [DONE] * Misc: isEmptyElement, getDepth
      [DONE] * Full pass-through method (copyEventFromReader())
      * Extended location information access via LocationInfo;
        methods for getting start and end locations of an event, as well
        as the current location.
   * XMLStreamWriter2:
      [DONE] * pass-through write method for outputting raw (non-encoded) stuff
      [Partial?] * setFeature/getFeature (which property/ies?)
      [DONE] * writeDTD to support DTD2
      [DONE] * writeFullEndElement (for ensuring explict end tag)
      * Allow configuration of extra white space after empty element
        (like '<tag />')
[DONE] * evt/DTD2: allow access to root name, system id, public id, int. subset
[DONE] * evt/StartElement2: isEmptyElement()
[DONE] * evt/XMLEventFactory2: factory methods for creating DTD2, StartElement2 instances
[DONE] * EncodingWriterFactory, to create encoding writers for XML encoding,
         and matching implementations.

------------------------------------
Maybe for 2.0?
------------------------------------

* Fragment parsing/writing:
   * Allow for reading and writing of XML document fragments; essentially
     suppressing checks for single-root, and assuming that the outermost
     element(s) are not document root nodes (meaning also that DTD is not
     allowed to be output)

------------------------------------
For 2.x series (not for 2.0)
------------------------------------

* Exception-handling:
   * Add a WstxOutputException?
   * Separate exception class for DTD-parsing problems?
   * Perhaps add formal numeric (integer) error codes, to allow other code
     to more reliably determine problem type?

* DTD-handling/parsing:
   * Parse less information if no validation needed: partially done, does not
     really create content specifications; could also ignore creation of
     attribute lists?
   * Make public API that allows parsing of DTDs; main use will be
     to feed such DTD objects back as either override-DTDs (input),
     or actual DTDs (output+indenting, output+validation)

* Caching:
   * Refactor caching out of input factory, to be shared between
     factories and input/output modes (but have 2 actual Maps in
     CacheManager, to prevent trashing by either side).

------------------------------------
FROM 1.0 Backlog
------------------------------------

Documentation:

Namespace handling:

* (optional) Check that URIs that match 'xml' and 'xmlns' are not redefined?
  This is done by Xerces; not sure if namespace specs dictate this?
  [implement for 1.x?]

Refactoring:

* Continue working on J2ME subset; partial implementations do exist for
  both input and output factories, but should be able to squeeze out
  some more classes from subsets.
