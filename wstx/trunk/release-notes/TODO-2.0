------------------------------------
Must-haves for 2.0
------------------------------------

* Stream writers:
   * Validate names (local, full), when such validation enabled
[DONE] * Add CFG_CONVERT_CDATA_TO_TEXT to convert calls to output CDATA
     to produce TEXT instead.

[DONE] * Dual-licensing, changes to build.xml to produce ASL2.0 and LGPL jars.

* DTD-handling/parsing:
[DONE] * Verify that an unparsed entity refers to a declared notation.
[DONE] * Make attribute type declarations accessible via stream API
   * Make attribute type declarations accessible via event API
   * Make 'is specified' property accessible via event API

* Unit testing: Implement at least simple basic StAX-tests for:
   * Event reader
   * Stream writer
   * Event writer

* StAX 2.0 features:
   * Package API classes to a separate jar (in addition to including them
     in woodstox jars)
   * XMLEventReader2:
   * XMLInputFactory2:
       * Create URI-based factory methods for readers
         (will create XMLStreamReader2 instances)
   * XMLOutputFactory2:
   * XMLStreamLocation2:
       * Allow access to nested location information
   * XMLStreamReader2:
      * getText with Writer arg
      * getAttributeIndex
      * getIdAttributeIndex
      * Separate DTD info access behind a new interface (DTDInfo?)
   * XMLStreamWriter2:
      * pass-through write method
   * XMLTextEncoder?
   * evt/DTD2:
   * evt/StartElement2:
   * evt/XMLEventFactory2:

------------------------------------
Maybe for 2.0?
------------------------------------

* Fragment parsing/writing:
   * Allow for reading and writing of XML document fragments; essentially
     suppressing checks for single-root, and assuming that the outermost
     element(s) are not document root nodes (meaning also that DTD is not
     allowed to be output)

------------------------------------
For 2.x series (not for 2.0)
------------------------------------

* Exception-handling:
   * Add a WstxOutputException?
   * Separate exception class for DTD-parsing problems?
   * Perhaps add formal numeric (integer) error codes, to allow other code
     to more reliably determine problem type?

* DTD-handling/parsing:
   * Parse less information if no validation needed: partially done, does not
     really create content specifications; could also ignore creation of
     attribute lists?
   * Make public API that allows parsing of DTDs; main use will be
     to feed such DTD objects back as either override-DTDs (input),
     or actual DTDs (output+indenting, output+validation)

* Caching:
   * Refactor caching out of input factory, to be shared between
     factories and input/output modes (but have 2 actual Maps in
     CacheManager, to prevent trashing by either side).

------------------------------------
FROM 1.0 Backlog
------------------------------------

Documentation:

Namespace handling:

* (optional) Check that URIs that match 'xml' and 'xmlns' are not redefined?
  This is done by Xerces; not sure if namespace specs dictate this?
  [implement for 1.x?]

Refactoring:

* Continue working on J2ME subset; partial implementations do exist for
  both input and output factories, but should be able to squeeze out
  some more classes from subsets.
